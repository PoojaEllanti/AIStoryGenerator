# app.py

import streamlit as st # type: ignore
from transformers import pipeline, set_seed # type: ignore

# Title
st.set_page_config(page_title="AI Dungeon Story Generator", layout="centered")
st.title("üßô‚Äç‚ôÇÔ∏è AI Dungeon Story Generator")
st.markdown("Create fantasy, mystery, or sci-fi stories with AI magic!")

# Load text-generation pipeline
@st.cache_resource
def load_model():
    return pipeline("text-generation", model="gpt2")

generator = load_model()
set_seed(42)

# Genre selection
genre = st.selectbox("Choose a genre", ["Fantasy", "Mystery", "Sci-Fi", "Horror", "Romance"])

# Prompt input
prompt = st.text_area("Enter your story prompt:", height=150)

# Number of outputs and length
num_outputs = st.slider("Number of story continuations", 1, 5, 1)
story_length = st.slider("Length of each continuation (max tokens)", 50, 300, 100)

# Generate button
if st.button("Generate Story"):
    if prompt.strip() == "":
        st.warning("Please enter a story prompt first.")
    else:
        st.subheader("Generated Story Continuations:")
        input_text = f"[{genre}] {prompt}"
        results = generator(input_text, max_length=story_length, num_return_sequences=num_outputs)
        for i, result in enumerate(results):
            st.markdown(f"### ‚ú® Story {i+1}")
            st.write(result['generated_text'])

# Save story
if prompt:
    if st.button("Save Story"):
        with open("generated_story.txt", "w", encoding="utf-8") as f:
            f.write(f"Genre: {genre}\nPrompt: {prompt}\n\n")
            f.write("Generated by AI Dungeon Story Generator.\n")
        st.success("‚úÖ Story saved as 'generated_story.txt'")
